/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package frontend.v2.containers;

import backend.AppConfig;
import backend.AppConstants;
import backend.ColorScheme;
import backend.eventadapter.GranularMouseAdapter;
import backend.v2.search.SearchTermAlgorithm;
import book.bookpicker.Book;
import frontend.RoundedButton;
import frontend.SettingsFrameController;
import java.awt.Color;
import java.awt.event.MouseEvent;
import java.io.File;
import java.io.IOException;
import java.nio.file.AccessDeniedException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

/**
 *
 * @author BRIN
 */
public class SettingsContainer extends javax.swing.JPanel {

    
    private final String APP_NAME = "Medical-Glossary";
    private final String BOOKS = "books";
    /**
     * Creates new form SettingsContainer
     */
    public SettingsContainer() {
        initComponents();
        
        Path currentLocation = AppConfig.getStorageLocation().resolve(APP_NAME).resolve(BOOKS);
        
        storageLocationLabel.setText(currentLocation.toString());
        SearchDepthButtonManager sdbm = new SearchDepthButtonManager(AppConfig.getSearchDepth());
        initializeChangeButton();
        initializeSaveButton();
        initializeRevertButton();
    }
    
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        foregroundHeader1 = new javax.swing.JLabel();
        foregroundHeader2 = new javax.swing.JLabel();
        sep1 = new frontend.RoundedPanel();
        sep2 = new frontend.RoundedPanel();
        storageLocationLabel = new javax.swing.JLabel();
        changeButton = new frontend.RoundedButton();
        foregroundHeader3 = new javax.swing.JLabel();
        foregroundHeader4 = new javax.swing.JLabel();
        shallowButton = new frontend.RoundedButton();
        deepButton = new frontend.RoundedButton();
        balancedButton = new frontend.RoundedButton();
        saveButton = new frontend.RoundedButton();
        revertButton = new frontend.RoundedButton();

        setBackground(new java.awt.Color(39, 52, 65));
        setMinimumSize(new java.awt.Dimension(1260, 580));
        setPreferredSize(new java.awt.Dimension(1260, 580));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        foregroundHeader1.setFont(new java.awt.Font("Segoe UI", 0, 40)); // NOI18N
        foregroundHeader1.setForeground(new java.awt.Color(255, 255, 255));
        foregroundHeader1.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        foregroundHeader1.setText("Settings");
        add(foregroundHeader1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, -10, 190, 60));

        foregroundHeader2.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        foregroundHeader2.setForeground(new java.awt.Color(205, 205, 205));
        foregroundHeader2.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        foregroundHeader2.setText("GENERAL");
        add(foregroundHeader2, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 60, 190, 30));

        sep1.setArcSize(5);

        javax.swing.GroupLayout sep1Layout = new javax.swing.GroupLayout(sep1);
        sep1.setLayout(sep1Layout);
        sep1Layout.setHorizontalGroup(
            sep1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1120, Short.MAX_VALUE)
        );
        sep1Layout.setVerticalGroup(
            sep1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 5, Short.MAX_VALUE)
        );

        add(sep1, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 75, 1120, 5));

        sep2.setArcSize(15);
        sep2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        storageLocationLabel.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        storageLocationLabel.setForeground(new java.awt.Color(255, 255, 255));
        storageLocationLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        sep2.add(storageLocationLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 3, 1050, 30));

        add(sep2, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 140, 1070, 40));

        changeButton.setText("CHANGE");
        changeButton.setArcSize(15);
        changeButton.setCurrentColor(new java.awt.Color(15, 20, 25));
        add(changeButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(1120, 140, 120, -1));

        foregroundHeader3.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        foregroundHeader3.setForeground(new java.awt.Color(255, 255, 255));
        foregroundHeader3.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        foregroundHeader3.setText("Current Suggestion Search Depth:");
        add(foregroundHeader3, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 200, 280, 40));

        foregroundHeader4.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        foregroundHeader4.setForeground(new java.awt.Color(255, 255, 255));
        foregroundHeader4.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        foregroundHeader4.setText("Current Save Location:");
        add(foregroundHeader4, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 100, 190, 30));

        shallowButton.setText("SHALLOW");
        shallowButton.setArcSize(15);
        shallowButton.setCurrentColor(new java.awt.Color(15, 20, 25));
        add(shallowButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(610, 200, 120, -1));

        deepButton.setText("DEEP");
        deepButton.setArcSize(15);
        deepButton.setCurrentColor(new java.awt.Color(15, 20, 25));
        add(deepButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 200, 120, -1));

        balancedButton.setText("BALANCED");
        balancedButton.setArcSize(15);
        balancedButton.setCurrentColor(new java.awt.Color(15, 20, 25));
        add(balancedButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 200, 120, -1));

        saveButton.setText("SAVE");
        saveButton.setArcSize(15);
        saveButton.setCurrentColor(new java.awt.Color(15, 20, 25));
        add(saveButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(1120, 520, 120, -1));

        revertButton.setText("REVERT");
        revertButton.setArcSize(15);
        revertButton.setCurrentColor(new java.awt.Color(15, 20, 25));
        add(revertButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(980, 520, 120, -1));
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private frontend.RoundedButton balancedButton;
    private frontend.RoundedButton changeButton;
    private frontend.RoundedButton deepButton;
    private javax.swing.JLabel foregroundHeader1;
    private javax.swing.JLabel foregroundHeader2;
    private javax.swing.JLabel foregroundHeader3;
    private javax.swing.JLabel foregroundHeader4;
    private frontend.RoundedButton revertButton;
    private frontend.RoundedButton saveButton;
    private frontend.RoundedPanel sep1;
    private frontend.RoundedPanel sep2;
    private frontend.RoundedButton shallowButton;
    private javax.swing.JLabel storageLocationLabel;
    // End of variables declaration//GEN-END:variables
    
    private final ColorScheme searchDepthCS = new ColorScheme(AppConstants.DEFAULT_NEXT_BUTTON_CS_1.getDefaultColor(), AppConstants.DEFAULT_NEXT_BUTTON_CS_1.getHoverColor(), AppConstants.DEFAULT_NEXT_BUTTON_CS_1.getPressedColor(), new Color(102,102,102));
    
    SearchDepthGRAN deepGran;
    SearchDepthGRAN balancedGran;
    SearchDepthGRAN shallowGran;
    
    private class SearchDepthButtonManager {
        
        

        public SearchDepthButtonManager(SearchTermAlgorithm.SearchType initialType) {
            
            deepGran = new SearchDepthGRAN(SearchTermAlgorithm.SearchType.DEEP_SEARCH);
            balancedGran = new SearchDepthGRAN(SearchTermAlgorithm.SearchType.BALANCED_SEARCH);
            shallowGran = new SearchDepthGRAN(SearchTermAlgorithm.SearchType.SHALLOW_SEARCH);
            
            deepButton.addMouseListener(deepGran);
            balancedButton.addMouseListener(balancedGran);
            shallowButton.addMouseListener(shallowGran);
            
            deepGran.provideRunnable(() -> {
                balancedGran.switchON();
                shallowGran.switchON();
                balancedButton.setCurrentColor(searchDepthCS.getDefaultColor());
                shallowButton.setCurrentColor(searchDepthCS.getDefaultColor());
            });
            
            balancedGran.provideRunnable(() -> {
                deepGran.switchON();
                shallowGran.switchON();
                deepButton.setCurrentColor(searchDepthCS.getDefaultColor());
                shallowButton.setCurrentColor(searchDepthCS.getDefaultColor());
            });
            
            shallowGran.provideRunnable(() -> {
                deepGran.switchON();
                balancedGran.switchON();
                deepButton.setCurrentColor(searchDepthCS.getDefaultColor());
                balancedButton.setCurrentColor(searchDepthCS.getDefaultColor());
            });
            
            initializeFirst(initialType);
            
            
        }
    }
    
    private void initializeFirst(SearchTermAlgorithm.SearchType initialType){
        
        switch(initialType){
                
                case DEEP_SEARCH -> {
                    deepGran.activateDirect(deepButton);
                }
                
                case BALANCED_SEARCH -> {
                    balancedGran.activateDirect(balancedButton);
                }
                
                case SHALLOW_SEARCH -> {
                    shallowGran.activateDirect(shallowButton);
                }
            }
    }
    
    private class SearchDepthGRAN extends GranularMouseAdapter {
        
        private Runnable runnable;
        private SearchTermAlgorithm.SearchType toSet;

        public SearchDepthGRAN(SearchTermAlgorithm.SearchType toSet) {
            this.toSet = toSet;
        }
        
        public void provideRunnable(Runnable runnable){
            this.runnable = runnable;
        }
        
        public void activateDirect(RoundedButton rdb){
            rdb.setCurrentColor(searchDepthCS.getHoverColor());
            
            runnable.run();
            AppConfig.setSearchDepth(toSet);
            rdb.getParent().repaint();
            this.switchOff();
        }
        
        @Override
        public void actOnMouseEntry(MouseEvent e){
            RoundedButton rdb = (RoundedButton) e.getSource();
            rdb.setCurrentColor(searchDepthCS.getHoverColor());
            rdb.repaint();
        }
        
        @Override
        public void actOnMouseExit(MouseEvent e){
            RoundedButton rdb = (RoundedButton) e.getSource();
            rdb.setCurrentColor(searchDepthCS.getDefaultColor());
            rdb.repaint();
        }
        
        @Override
        public void actOnMousePress(MouseEvent e){
            RoundedButton rdb = (RoundedButton) e.getSource();
            rdb.setCurrentColor(searchDepthCS.getPressedColor());
            rdb.repaint();
        }
        
        @Override
        public void actOnMouseRelease(MouseEvent e){
            RoundedButton rdb = (RoundedButton) e.getSource();
            activateDirect(rdb);
        }
    }
    
    private final ColorScheme changeButtonColorScheme = Book.GRAYS_ANATOMY.getColorScheme(); // because why not
    
    private void initializeChangeButton(){
        
        GranularMouseAdapter changeButtonMAdapt = new GranularMouseAdapter(){
            @Override
            public void actOnMouseEntry(MouseEvent e){
                changeButton.setCurrentColor(changeButtonColorScheme.getHoverColor());
                changeButton.setForeground(changeButtonColorScheme.getDisabledColor());
            }
            
            @Override
            public void actOnMouseExit(MouseEvent e){
                changeButton.setCurrentColor(new Color(15,20,25));
                changeButton.setForeground(Color.white);
            }
            
            @Override
            public void actOnMousePress(MouseEvent e){
                changeButton.setCurrentColor(changeButtonColorScheme.getPressedColor());
            }
            
            @Override
            public void actOnMouseRelease(MouseEvent e){
                changeButton.setCurrentColor(changeButtonColorScheme.getHoverColor());
                queryChange();
            }
        };
        
        changeButton.addMouseListener(changeButtonMAdapt);
    }
    
    private static final ColorScheme SAVE_BUTTON_CS = AppConstants.DEFAULT_NEXT_BUTTON_CS_1;
    
    private void queryChange(){
        JFileChooser chooser = new JFileChooser();
            
        chooser.setDialogTitle("Select the directory where terms will be stored:");
        chooser.setApproveButtonText("Confirm");
        chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);

        boolean isARoot = false;
        boolean sameRootPath = false;
        boolean exists = true;
        File[] roots = File.listRoots();
        do{

            chooser.setCurrentDirectory(AppConfig.getStorageLocation().toFile());
            int option = chooser.showOpenDialog(null);
            

            if (option == JFileChooser.APPROVE_OPTION) {
                File selectedDir = chooser.getSelectedFile();
                for(File f : roots){
                    if(selectedDir.equals(f)){
                        isARoot = true;
                    }
                }
                
                String storagePath = selectedDir.getAbsolutePath();
                Path newPath = Paths.get(storagePath);
                
                int response = JOptionPane.showConfirmDialog(null, "Confirm selection: " + newPath.toString());
                
                if(response != JOptionPane.YES_OPTION){
                    continue;
                }
                
                exists = newPath.toFile().exists();
                
                sameRootPath = newPath.startsWith(AppConfig.getStorageLocation());
                
                newPath = newPath.resolve(APP_NAME).resolve(BOOKS);
                
                if(!isARoot && !sameRootPath && exists){
                    storageLocationLabel.setText(newPath.toString());
                    AppConfig.setStorageLocation(Paths.get(storagePath));
                }
                else if(isARoot){
                    JOptionPane.showMessageDialog(null, "Selected directory was found to be root directory! This may cause permission issues. Please select another directory");
                }
                else if(sameRootPath){
                    JOptionPane.showMessageDialog(null, "Please select a directory different than what is currently initialized.");
                }
                else if(!exists){
                    JOptionPane.showMessageDialog(null, "Selected directory does not exists!");
                }

            }else{
                break;
            }
        }while(isARoot || sameRootPath || !exists);
    }
    
    private void initializeSaveButton(){
        
        GranularMouseAdapter saveGran = new GranularMouseAdapter(){
            
            @Override
            public void actOnMouseEntry(MouseEvent e){
                saveButton.setCurrentColor(SAVE_BUTTON_CS.getHoverColor());
            }
            
            @Override
            public void actOnMouseExit(MouseEvent e){
                saveButton.setCurrentColor(SAVE_BUTTON_CS.getDefaultColor());
            }
            
            @Override
            public void actOnMousePress(MouseEvent e){
                saveButton.setCurrentColor(SAVE_BUTTON_CS.getPressedColor());
            }
            
            @Override
            public void actOnMouseRelease(MouseEvent e){
                saveButton.setCurrentColor(SAVE_BUTTON_CS.getHoverColor());
                performSave();
            }
            
        };
        
       saveButton.addMouseListener(saveGran);
    }
    
    private void performSave(){
        
        int response = 999;
        if(AppConfig.storageLocationPropertyChanged()){

            String[] options = {"Confirm", "Cancel"};
            response = JOptionPane.showOptionDialog(
                this, // Parent component
                "Storage location was changed. The application will exit now. This is required to correctly apply new settings.", // Message
                "Storage location changed", // Title
                JOptionPane.YES_NO_OPTION, // Option type (custom buttons)
                JOptionPane.WARNING_MESSAGE, // Message type (icon)
                null, // Custom icon (null uses default)
                options, // Custom button labels
                options[0] // Default selected option
            );
        }

        if(response == 0 || response == 999){

            try {
                AppConfig.storeUserPropertiesToFile();
                if(response == 0){
                    System.exit(0);
                }
            } catch (AccessDeniedException ex){

                JOptionPane.showMessageDialog(
                        this, 
                        "You either don't have enough administrative priviledges or the destination directory is not currently accessible: \njava.nio.file.AccessDeniedException", 
                        "Error moving to destination directory", 
                        JOptionPane.ERROR_MESSAGE);
            } catch (IOException ex) {

                JOptionPane.showMessageDialog(
                        this, 
                        "Error encountered while trying to move to destination directory: \njava.io.IOException: " + ex.getMessage(), 
                        "Error moving to destination directory", 
                        JOptionPane.ERROR_MESSAGE);
                System.getLogger(SettingsFrameController.class.getName()).log(System.Logger.Level.ERROR, (String) null, ex);
            }

        }
        else if(response == 1 || response == -1){ // FIX for v0.5.0: fixed issue where pressing cross upon getting confirmation message for changing storage location would not reset the storage location field.
            storageLocationLabel.setText(AppConfig.getStorageLocation().resolve(APP_NAME).resolve(BOOKS).toString());
            AppConfig.setStorageLocation(AppConfig.getStorageLocation());
            try {
                AppConfig.storeUserPropertiesToFile(); // this will only save the search depth settings.
            } catch (IOException ex) {
                System.getLogger(SettingsContainer.class.getName()).log(System.Logger.Level.ERROR, (String) null, ex);
            }
        }
    }
    
    private static ColorScheme revertCS = AppConstants.DEFAULT_BACK_BUTTON_CS_1;
    
    private void initializeRevertButton(){
        
        GranularMouseAdapter revertGran = new GranularMouseAdapter(){
            
            @Override
            public void actOnMouseEntry(MouseEvent e){
                revertButton.setCurrentColor(revertCS.getHoverColor());
            }
            
            @Override
            public void actOnMouseExit(MouseEvent e){
                revertButton.setCurrentColor(revertCS.getDefaultColor());
            }
            
            @Override
            
            public void actOnMousePress(MouseEvent e){
                revertButton.setCurrentColor(revertCS.getPressedColor());
            }
            
            @Override
            public void actOnMouseRelease(MouseEvent e){
                revertButton.setCurrentColor(revertCS.getHoverColor());
                revertChanges();
            }
            
        };
        
        revertButton.addMouseListener(revertGran);
    }
    
    private void revertChanges(){
        
        AppConfig.resetUserProperties();
        
        Path currentLocation = AppConfig.getStorageLocation().resolve(APP_NAME).resolve(BOOKS);
        
        storageLocationLabel.setText(currentLocation.toString());
        initializeFirst(AppConfig.getSearchDepth());
    }
}
