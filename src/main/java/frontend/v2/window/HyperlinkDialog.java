/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JDialog.java to edit this template
 */
package frontend.v2.window;

import backend.eventadapter.DocumentEventAdapter;
import backend.eventadapter.GranularMouseAdapter;
import backend.v2.term.AdvancedHyperlink;
import backend.v2.term.IllegalTermStateException;
import frontend.RoundedButton;
import java.awt.Color;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.FocusAdapter;
import java.awt.event.FocusEvent;
import java.awt.event.MouseEvent;
import javax.swing.JTextField;
import javax.swing.event.DocumentEvent;

/**
 *
 * @author BRIN
 */
public class HyperlinkDialog extends javax.swing.JDialog {
    
    private static final String DEFAULT_ENCAP_TEXT = "Enter encapsulating text here...";
    private static final String DEFAULT_LINK_TEXT = "Links to...";
    
    private static final Color ENABLED_BG = new Color(15,20,25);
    private static final Color ENABLED_FG = new Color(255,255,255);
    private static final Color DISABLED_BG = new Color(29,39,49);
    private static final Color DISABLED_FG = new Color(204,204,204);
    
    /**
     * Creates new form HyperlinkDialog
     */
    
    private AdvancedHyperlink modifiedLink;
    
    public HyperlinkDialog(java.awt.Frame parent) {
        super(parent, "Edit hyperlink for ", true);
        initComponents();
        
        
        encapField.setText(DEFAULT_ENCAP_TEXT);
        linkField.setText(DEFAULT_LINK_TEXT);
        
        encapField.addMouseListener(spgranEncap);
        linkField.addMouseListener(spgranLink);
        encapField.addFocusListener(spfadaptEncap);
        linkField.addFocusListener(spfadaptLink);
        
        encapField.getDocument().addDocumentListener(deaEncap);
        linkField.getDocument().addDocumentListener(deaLink);
        
        saveButton.addActionListener(saveAction);
        cancelButton.addActionListener(cancelAction);
        
        saveButton.addMouseListener(commonGrans);
        cancelButton.addMouseListener(commonGrans);
        statusLabel.requestFocusInWindow();// to ensure the text field don't get focus.
    }

    public AdvancedHyperlink showDialog(AdvancedHyperlink original){
        
        encapField.setForeground(DEFAULT_GRAYISH_WHITE);
        linkField.setForeground(DEFAULT_GRAYISH_WHITE);
        
        if(!original.isDefault()){
            spgranEncap.switchOff();
            spgranLink.switchOff();
            encapField.setText(original.getEncapsulation());
            linkField.setText(original.getHyperlink());
            encapField.setForeground(DEFAULT_WHITE);
            linkField.setForeground(DEFAULT_WHITE);
            
        }
        
        
        
        this.setVisible(true);
        
        return modifiedLink;
    }
    
    public AdvancedHyperlink getRecentValue(){
        return modifiedLink;
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        roundedPanel8 = new frontend.RoundedPanel();
        encapField = new javax.swing.JTextField();
        saveButton = new frontend.RoundedButton();
        roundedPanel10 = new frontend.RoundedPanel();
        linkField = new javax.swing.JTextField();
        statusLabel = new javax.swing.JLabel();
        cancelButton = new frontend.RoundedButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setBackground(new java.awt.Color(39, 52, 65));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        roundedPanel8.setArcSize(15);
        roundedPanel8.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        encapField.setBackground(new java.awt.Color(57, 75, 92));
        encapField.setFont(new java.awt.Font("Microsoft YaHei UI", 1, 16)); // NOI18N
        encapField.setForeground(new java.awt.Color(255, 255, 255));
        encapField.setBorder(null);
        encapField.setCaretColor(new java.awt.Color(255, 255, 255));
        roundedPanel8.add(encapField, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 5, 660, 30));

        jPanel1.add(roundedPanel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 50, 680, 40));

        saveButton.setText("SAVE");
        saveButton.setArcSize(15);
        saveButton.setCurrentColor(new java.awt.Color(15, 20, 25));
        jPanel1.add(saveButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(630, 180, 110, -1));

        roundedPanel10.setArcSize(15);
        roundedPanel10.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        linkField.setBackground(new java.awt.Color(57, 75, 92));
        linkField.setFont(new java.awt.Font("Microsoft YaHei UI", 1, 16)); // NOI18N
        linkField.setForeground(new java.awt.Color(255, 255, 255));
        linkField.setBorder(null);
        linkField.setCaretColor(new java.awt.Color(255, 255, 255));
        roundedPanel10.add(linkField, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 5, 660, 30));

        jPanel1.add(roundedPanel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 110, 680, 40));

        statusLabel.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        statusLabel.setForeground(new java.awt.Color(255, 153, 153));
        statusLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        statusLabel.setNextFocusableComponent(this);
        jPanel1.add(statusLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(65, 185, 330, 30));

        cancelButton.setText("CANCEL");
        cancelButton.setArcSize(15);
        cancelButton.setCurrentColor(new java.awt.Color(15, 20, 25));
        jPanel1.add(cancelButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(500, 180, 110, -1));

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 800, 250));

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    
    private static final Color DEFAULT_WHITE = new Color(255,255,255);
    private static final Color DEFAULT_GRAYISH_WHITE = new Color(204,204,204);
    
    private final SpecificGran spgranEncap = new SpecificGran();
    private final SpecificGran spgranLink = new SpecificGran();
    
    private final SpecificFAdapt spfadaptEncap = new SpecificFAdapt(spgranEncap, DEFAULT_ENCAP_TEXT);
    private final SpecificFAdapt spfadaptLink = new SpecificFAdapt(spgranLink, DEFAULT_LINK_TEXT);
    
    private class SpecificFAdapt extends FocusAdapter {
        
        private final SpecificGran spGran;
        private final String defaultText;
        public SpecificFAdapt(SpecificGran spGran, String defaultText){
            this.spGran = spGran;
            this.defaultText = defaultText;
        }
        
        @Override
        public void focusGained(FocusEvent e){
            JTextField source = (JTextField) e.getSource();
            
            if(source.getText().equals(defaultText)){
                source.setText("");
                source.setForeground(DEFAULT_WHITE);
                spGran.switchOff();
            }
        }

        @Override
        public void focusLost(FocusEvent e){
            JTextField source = (JTextField) e.getSource();
            
            if(source.getText().equals("")){
                source.setText(defaultText);
                source.setForeground(DEFAULT_GRAYISH_WHITE);
                spGran.switchON();
            }
        }
    }
    
    private class SpecificGran extends GranularMouseAdapter {
        
        @Override
        public void actOnMouseEntry(MouseEvent e){
            JTextField source = (JTextField) e.getSource();
            source.setForeground(DEFAULT_WHITE);
        }
        
        @Override
        public void actOnMouseExit(MouseEvent e){
            JTextField source = (JTextField) e.getSource();
            source.setForeground(DEFAULT_GRAYISH_WHITE);
        }
    }
    
    
    private final DocumentEventAdapter deaEncap = new DocumentEventAdapter(){
        
        @Override
        public void actOnInsert(DocumentEvent e){encapCheck();}
    
        @Override
        public void actOnRemove(DocumentEvent e){encapCheck();}

        @Override
        public void actOnChange(DocumentEvent e){encapCheck();}
    };
    
    private boolean validEncap = true;
    
    private void encapCheck(){
        
        if(encapField.getText().isBlank()){
            statusLabel.setText("Encapsulation can not be empty.");
            validEncap = false;
            setSaveEnabled(false);
        }
        else {
            statusLabel.setText("");
            validEncap = true;
        }
        
        setSaveEnabled(validEncap && validLink && defaultDiscrepancy());
    }
    
    private final DocumentEventAdapter deaLink = new DocumentEventAdapter(){
        
        @Override
        public void actOnInsert(DocumentEvent e){linkCheck();}
    
        @Override
        public void actOnRemove(DocumentEvent e){linkCheck();}

        @Override
        public void actOnChange(DocumentEvent e){linkCheck();}
    };
    
    private boolean validLink = true;
    
    private void linkCheck(){
        
        String text = linkField.getText().strip();
        if(!text.startsWith("https://") && !text.startsWith("http://")){
            statusLabel.setText("Link should start with 'https://' or 'http://'");
            validLink = false;
        }else if(text.equals("https://") || text.equals("http://")){
            statusLabel.setText("Link should start with 'https://' or 'http://'");
            validLink = false;
        }else {
            statusLabel.setText("");
            validLink = true;
        }
        setSaveEnabled(validLink && validEncap && defaultDiscrepancy());
    }
    
    private void setSaveEnabled(boolean toSet){
        if(toSet == saveButton.isEnabled()){
            return;
        }
        saveButton.setEnabled(toSet);
        if(toSet){
            saveButton.setBackground(ENABLED_BG);
            saveButton.setForeground(ENABLED_FG);
        }else {
            saveButton.setBackground(DISABLED_BG);
            saveButton.setForeground(DISABLED_FG);
            
        }
        
    }
    
    private boolean defaultDiscrepancy(){
        String encap = encapField.getText();
        String link = linkField.getText();
        
        boolean encapChanged = !encap.equals(DEFAULT_ENCAP_TEXT);
        boolean linkChanged = !link.equals(DEFAULT_LINK_TEXT);
        
        return (encapChanged && linkChanged) || (!encapChanged && !linkChanged);
    }
    
    
    private static final Color SAVE_CANCEL_DEFAULT_BG = new Color(15,20,25);
    private static final Color SAVE_HOVER_BG = new Color(43,181,114);
    private static final Color SAVE_PRESSED_BG = new Color(37,160,100);
    
    private static final Color CANCEL_HOVER_BG = new Color(255,51,51);
    private static final Color CANCEL_PRESSED_BG = new Color(224,51,51);
    
    private final GranularMouseAdapter commonGrans = new GranularMouseAdapter(){
        
        @Override
        public void actOnMouseEntry(MouseEvent e){
            RoundedButton rdb = (RoundedButton) e.getSource();
            if(rdb == saveButton){
                rdb.setCurrentColor(SAVE_HOVER_BG);
            }
            else if(rdb == cancelButton){
                rdb.setCurrentColor(CANCEL_HOVER_BG);
            }
            
            rdb.repaint();
        }
        
        @Override
        public void actOnMouseExit(MouseEvent e){
            RoundedButton rdb = (RoundedButton) e.getSource();
            rdb.setCurrentColor(SAVE_CANCEL_DEFAULT_BG);
            rdb.repaint();
        }
        
        @Override
        public void actOnMousePress(MouseEvent e){
            RoundedButton rdb = (RoundedButton) e.getSource();
            if(rdb == saveButton){
                rdb.setCurrentColor(SAVE_PRESSED_BG);
            }
            else if(rdb == cancelButton){
                rdb.setCurrentColor(CANCEL_PRESSED_BG);
            }
            rdb.repaint();
        }
    };
    
    
    private final ActionListener saveAction = new ActionListener() {
        @Override
        public void actionPerformed(ActionEvent e) {
            AdvancedHyperlink toSet = null;
            try {
                String link = linkField.getText();
                String encap = encapField.getText();
                if(!link.equals(DEFAULT_LINK_TEXT) && !encap.equals(DEFAULT_ENCAP_TEXT)){
                    toSet = new AdvancedHyperlink();
                    toSet.setHyperlink(link, encap);
                }
            } catch (IllegalTermStateException ex) {
                System.getLogger(HyperlinkDialog.class.getName()).log(System.Logger.Level.ERROR, (String) null, ex);
            }
            
            modifiedLink = toSet;
            dispose();
        }
    };
    
    private final ActionListener cancelAction = (ActionEvent e) -> {
        dispose();
    };
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private frontend.RoundedButton cancelButton;
    private javax.swing.JTextField encapField;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JTextField linkField;
    private frontend.RoundedPanel roundedPanel10;
    private frontend.RoundedPanel roundedPanel8;
    private frontend.RoundedButton saveButton;
    private javax.swing.JLabel statusLabel;
    // End of variables declaration//GEN-END:variables
}
